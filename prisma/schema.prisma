generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  name             String            @unique
  setupComplete    Boolean           @default(false)
  email            String?           @unique
  passwordHash     String?
  rehabEnabled     Boolean           @default(false)
  rehabExercises   RehabExercise[]
  stats            Stats?
  workouts         Workout[]
  sentRequests     Friendship[]      @relation("SentRequests")
  receivedRequests Friendship[]      @relation("ReceivedRequests")
  privacySettings  PrivacySettings?
  activities       FriendActivity[]
  habitLogs        HabitLog[]
  gymPlans         GymPlan[]
}

model Workout {
  id        String     @id @default(cuid())
  userId    String
  date      DateTime
  completed Boolean    @default(false)
  exercises Exercise[]
  user      User       @relation(fields: [userId], references: [id])

  @@index([userId, date])
}

model Exercise {
  id         String  @id @default(cuid())
  workoutId  String
  name       String
  orderIndex Int
  workout    Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  sets       Set[]

  @@index([workoutId])
}

model Set {
  id         String   @id @default(cuid())
  exerciseId String
  reps       Int
  weight     Float
  completed  Boolean  @default(false)
  orderIndex Int
  exercise   Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)

  @@index([exerciseId])
}

model Stats {
  id                 String    @id @default(cuid())
  userId             String    @unique
  totalSetsCompleted Int       @default(0)
  totalExercises     Int       @default(0)
  lastWorkoutDate    DateTime?
  user               User      @relation(fields: [userId], references: [id])
}

model RehabExercise {
  id            String    @id @default(cuid())
  userId        String
  name          String
  description   String?
  category      String?
  setsLeft      Int?
  setsRight     Int?
  sets          Int?
  reps          Int?
  hold          Int?
  load          String?
  bandColor     String?
  time          String?
  cues          String?
  completed     Boolean   @default(false)
  completedDate DateTime?
  orderIndex    Int
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ActivityLog {
  id        String   @id @default(cuid())
  timestamp DateTime @default(now())
  category  String
  operation String
  message   String
  status    String
  details   Json?

  @@index([timestamp])
  @@index([category])
  @@index([status])
}

model Friendship {
  id          String           @id @default(cuid())
  requesterId String
  addresseeId String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  requester User @relation("SentRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  addressee User @relation("ReceivedRequests", fields: [addresseeId], references: [id], onDelete: Cascade)

  @@unique([requesterId, addresseeId])
  @@index([requesterId])
  @@index([addresseeId])
  @@index([status])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
  BLOCKED
}

model PrivacySettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  showWorkoutDetails    Boolean @default(true)
  showExerciseNames     Boolean @default(true)
  showPerformanceTrends Boolean @default(true)
  showWorkoutSchedule   Boolean @default(true)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FriendActivity {
  id           String   @id @default(cuid())
  userId       String
  activityType String
  data         Json
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([createdAt])
}

model HabitLog {
  id        String   @id @default(cuid())
  userId    String
  type      String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, timestamp])
}

model GymPlan {
  id              String   @id @default(cuid())
  userId          String
  createdAt       DateTime @default(now())

  fitnessGoal     String
  fitnessLevel    String
  daysPerWeek     Int
  equipmentAccess String

  planContent     Json
  weeklySchedule  Json
  status          String   @default("active")

  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}
